@startuml "allowance_questboard_DDD_clsd"

package "presentation" #LightBlue {

    class QuestPage <StatelessWidget> {
        + int questId
        - QuestApplicationService _service
        ---
        + build()
    }

    note right of QuestPage
        プレゼンテーション層であるQuestPageはアプリケーションサービスを使用して
        DTOを取得し、画面を表示します。
    end note

}

presentation.QuestPage -down-> application.QuestApplicationService: getQuest(questId)
presentation.QuestPage -down-> application.QuestData: 使用

package "application" #LightGreen {

    class QuestData {
        + int id
        + String title
        + something ...
    }

    note left of QuestData
        DTOであるQuestDataは、画面に表示するためのデータを保持します。
        表示用、新規作成用、編集用など用途に合わせて新たに作成します。
    end note

    QuestApplicationService -left-> QuestData: 生成

    class QuestApplicationService{
        + QuestApplicationService()
        + Future<Quest> getQuest(int questId)
    }

    note right of QuestApplicationService
        アプリケーションサービスであるQuestApplicationServiceは、
        リポジトリを使用してドメインモデルを取得し、
        DTOに変換してプレゼンテーション層へ返します。
    end note

}

application.QuestApplicationService -down-> domain.QuestRepository: find(questId)
application.QuestApplicationService -down-> domain.Quest: 使用

package "domain" #LightPink {
    interface QuestRepository {
        + {abstract}Future<Quest> find(QuestId questId)
        + {abstract}Future<Quest> findAll(QuestId questId)
    }

    note left of QuestRepository
        QuestRepositoryは、
        ドメインモデルを取得するためのリポジトリインターフェースです。
        リポジトリはインフラストラクチャ層で実装します。
    end note

    class Quest {
        + QuestId id
        + QuestTitle title
        + something ...
    }

    note right of Quest
        ドメインモデルであるQuestは、
        ビジネスロジック（バリデーションチェック等）を保持します。
        ドメインモデルはリポジトリを使用して取得します。
    end note
}

domain.QuestRepository <|-down- infrastructure.FireStoreQuestRepository: 実装
infrastructure.FireStoreQuestRepository -up-> domain.Quest: 生成

package "infrastructure" #WhiteSmoke {
    class FireStoreQuestRepository <QuestRepository> {
        + Future<Quest> find(QuestId questId)
        + Future<Quest> findAll(QuestId questId)
    }

    note right of FireStoreQuestRepository
        インフラストラクチャ層であるFireStoreQuestRepositoryは、
        実際にデータベースにアクセスし、情報を取得します。
        取得した情報をドメインモデルに変換して返します。
    end note
}

@enduml
